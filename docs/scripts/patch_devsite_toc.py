"""
python-bigtable is made up of multiple clients, which we want to categorize separately in
the devsite table of contents.

To accomplish this, we will read in the generated toc file, remove the markdown content,
and replace it with a hand-written template
"""


import yaml
import os
import shutil

# set workinf directory to /docs
os.chdir(f"{os.path.dirname(os.path.abspath(__file__))}/{os.pardir}")

class TocSection:
    def __init__(self, dir_name, index_file_name):
        """
        :param dir_name: name of the directory containing the rst files
        :param index_file_name: name of an index file within dir_name. This file
            will not be included in the table of contents, but provides an ordered
            list of the other files which should be included
        """
        self.dir_name = dir_name
        index_file_path = os.path.join(dir_name, index_file_name)
        with open(index_file_path, "r") as f:
            self.title = f.readline().replace("\n", "")
            in_toc = False
            self.items = []
            for line in f:
                if line.startswith(".. toctree::"):
                    in_toc = True
                elif in_toc:
                    if not line.strip():
                        # ignore empty lines
                        continue
                    elif line.startswith(" ") or line.startswith("\t"):
                        # keep track of the items in the table of contents
                        # ignore : directives
                        if ":" not in line:
                            file_name = line.strip()
                            # load the file to get the title
                            with open(f"{dir_name}/{file_name}.rst", "r") as f2:
                                file_title = f2.readline().replace("\n", "")
                                self.items.append({"name": file_title, "href": f"{file_name}.md"})
                    else:
                        # if we are out of the indented block, we are done
                        break
                        in_toc = False

    def to_dict(self):
        """
        Convert the TocSection object to a dictionary that can be written to a yaml file
        """
        return {"name": self.title, "items": self.items}

    def copy_markdown(self):
        """
        Copy markdown files from _build/markdown/dir_name to _build/html/docfx_yaml

        This is necessary because the markdown files in dub-directories 
        are not copied over by the docfx build by default
        """
        for file in os.listdir("_build/markdown/" + self.dir_name):
            shutil.copy(
                f"_build/markdown/{self.dir_name}/{file}",
                f"_build/html/docfx_yaml",
            )

def add_sections(toc_file_path, section_list, output_file_path=None):
    """
    Add new sections to the autogenerated docfx table of contents file

    Takes in a list of TocSection objects, which should point to a directory of rst files
    within the main /docs directory, which represents a self-contained section of content

    :param toc_file_path: path to the autogenerated toc file
    :param section_list: list of TocSection objects to add
    :param output_file_path: path to save the updated toc file. If None, save to the input file
    """
    current_toc = yaml.safe_load(open(toc_file_path, "r"))
    for section in section_list:
        current_toc[0]["items"].insert(-1, section.to_dict())
        section.copy_markdown()
    # save file
    if output_file_path is None:
        output_file_path = toc_file_path
    with open(output_file_path, "w") as f:
        yaml.dump(current_toc, f)
