asyncio_replacements:  # Replace entire modules
  sleep: time.sleep
  Queue: queue.Queue
  Condition: threading.Condition
  Future: concurrent.futures.Future
  create_task: threading.Thread

added_imports:
  - "import google.api_core.exceptions as core_exceptions"
  - "import threading"
  - "import concurrent.futures"
  - "from google.cloud.bigtable.data import Table"

text_replacements:  # Find and replace specific text patterns
  __anext__: __next__
  __aiter__: __iter__
  __aenter__: __enter__
  __aexit__: __exit__
  aclose: close
  AsyncIterable: Iterable
  AsyncIterator: Iterator
  StopAsyncIteration: StopIteration
  Awaitable: None
  BigtableDataClientAsync: BigtableDataClient
  BigtableAsyncClient: BigtableClient
  TableAsync: Table
  AsyncMock: mock.Mock
  retry_target_async: retry_target
  TestBigtableDataClientAsync: TestBigtableDataClient
  assert_awaited_once: assert_called_once
  assert_awaited: assert_called_once
  grpc_helpers_async: grpc_helpers

classes:
  #- path: tests.unit.data._async.test__mutate_rows.TestMutateRowsOperation
  #  autogen_sync_name: TestMutateRowsOperation
  #  replace_methods:
  #      _target_class: |
  #          from google.cloud.bigtable.data._sync._mutate_rows import _MutateRowsOperation
  #          return _MutateRowsOperation
  #- path: tests.unit.data._async.test__read_rows.TestReadRowsOperation
  #  autogen_sync_name: TestReadRowsOperation
  #  text_replacements:
  #    test_aclose: test_close
  #  replace_methods:
  #      _get_target_class: |
  #          from google.cloud.bigtable.data._sync._read_rows import _ReadRowsOperation
  #          return _ReadRowsOperation
  #- path: tests.unit.data._async.test_mutations_batcher.Test_FlowControl
  #  autogen_sync_name: Test_FlowControl
  #  replace_methods:
  #      _target_class: |
  #          from google.cloud.bigtable.data._sync.mutations_batcher import _FlowControl
  #          return _FlowControl
  #- path: tests.unit.data._async.test_mutations_batcher.TestMutationsBatcherAsync
  #  autogen_sync_name: TestMutationsBatcher
  #  replace_methods:
  #      _get_target_class: |
  #          from google.cloud.bigtable.data._sync.mutations_batcher import MutationsBatcher
  #          return MutationsBatcher
  #      is_async: "return False"
  - path: tests.unit.data._async.test_client.TestBigtableDataClientAsync
    autogen_sync_name: TestBigtableDataClient
    added_imports:
      - "from google.api_core import grpc_helpers"
      - "from google.cloud.bigtable_v2.services.bigtable.client import BigtableClient"
      - "from google.cloud.bigtable_v2.services.bigtable.transports.pooled_grpc import PooledBigtableGrpcTransport"
      - "from google.cloud.bigtable_v2.services.bigtable.transports.pooled_grpc import PooledChannel"
    text_replacements:
      PooledBigtableGrpcAsyncIOTransport: PooledBigtableGrpcTransport
      PooledChannelAsync: PooledChannel
      TestTableAsync: TestTable
    replace_methods:
        _get_target_class: |
            from google.cloud.bigtable.data._sync.client import BigtableDataClient
            return BigtableDataClient
        is_async: "return False"
    drop_methods: ["test_client_ctor_sync", "test__start_background_channel_refresh_sync", "test__start_background_channel_refresh_tasks_names", "test_close_with_timeout"]
  - path: tests.unit.data._async.test_client.TestTableAsync
    autogen_sync_name: TestTable
    replace_methods:
        _get_target_class: |
            from google.cloud.bigtable.data._sync.client import Table
            return Table
        is_async: "return False"
    drop_methods: ["test_table_ctor_sync"]
  #- path: tests.unit.data._async.test_client.TestReadRowsShardedAsync
  #  autogen_sync_name: TestReadRowsSharded
  #- path: tests.unit.data._async.test_client.TestReadRowsAsync
  #  autogen_sync_name: TestReadRows

save_path: "tests/unit/data/_sync/test_autogen.py"
